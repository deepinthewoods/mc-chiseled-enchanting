This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T12:05:14.547Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.github/workflows/build.yml
.gitignore
build.gradle
gradle.properties
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
LICENSE
repomixx.bat
settings.gradle
src/client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingClient.java
src/client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingModMenu.java
src/client/java/ninja/trek/chiseledenchanting/mixin/client/ExampleClientMixin.java
src/client/resources/chiseled-enchanting.client.mixins.json
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchanting.java
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingConfig.java
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentScreenHandler.java
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlock.java
src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlockEntity.java
src/main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerAccessor.java
src/main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerMixin.java
src/main/java/ninja/trek/chiseledenchanting/mixin/ExampleMixin.java
src/main/resources/assets/chiseled-enchanting/blockstates/chiseled_enchanting_table.json
src/main/resources/assets/chiseled-enchanting/models/block/chiseled_enchanting_table.json
src/main/resources/assets/chiseled-enchanting/models/item/chiseled_enchanting_table.json
src/main/resources/chiseled-enchanting.mixins.json
src/main/resources/fabric.mod.json
src/repomix-output.xml
src/repomixx.bat
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
#
# https://help.github.com/articles/dealing-with-line-endings/
#
# Linux start script should use lf
/gradlew        text eol=lf

# These are Windows script files and should use crlf
*.bat           text eol=crlf
</file>

<file path=".github/workflows/build.yml">
# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.
name: build
on: [pull_request, push]
jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          21,    # Current Java LTS
        ]
    runs-on: ubuntu-22.04
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'microsoft'
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ matrix.java == '21' }} # Only upload artifacts built from latest java
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/
</file>

<file path=".gitignore">
# gradle

.gradle/
build/
out/
classes/

# eclipse

*.launch

# idea

.idea/
*.iml
*.ipr
*.iws

# vscode

.settings/
.vscode/
bin/
.classpath
.project

# macos

*.DS_Store

# fabric

run/

# java

hs_err_*.log
replay_*.log
*.hprof
*.jfr
</file>

<file path="build.gradle">
plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.terraformersmc.com/releases/" }  // For ModMenu
	maven { url "https://maven.shedaniel.me/" }  // For Cloth Config
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"chiseled-enchanting" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"


}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
</file>

<file path="gradle.properties">
# Done to increase the memory available to gradle.
org.gradle.jvmargs=-Xmx1G
org.gradle.parallel=true

# Fabric Properties
# check these on https://fabricmc.net/develop
minecraft_version=1.21
yarn_mappings=1.21+build.9
loader_version=0.16.10

# Mod Properties
mod_version=1.0.0
maven_group=ninja.trek.chiseledenchanting
archives_base_name=chiseled-enchanting

# Dependencies
fabric_version=0.102.0+1.21
modmenu_version=11.0.3
cloth_config_version=15.0.140
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="LICENSE">
Creative Commons Legal Code

CC0 1.0 Universal

    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
    HEREUNDER.

Statement of Purpose

The laws of most jurisdictions throughout the world automatically confer
exclusive Copyright and Related Rights (defined below) upon the creator
and subsequent owner(s) (each and all, an "owner") of an original work of
authorship and/or a database (each, a "Work").

Certain owners wish to permanently relinquish those rights to a Work for
the purpose of contributing to a commons of creative, cultural and
scientific works ("Commons") that the public can reliably and without fear
of later claims of infringement build upon, modify, incorporate in other
works, reuse and redistribute as freely as possible in any form whatsoever
and for any purposes, including without limitation commercial purposes.
These owners may contribute to the Commons to promote the ideal of a free
culture and the further production of creative, cultural and scientific
works, or to gain reputation or greater distribution for their Work in
part through the use and efforts of others.

For these and/or other purposes and motivations, and without any
expectation of additional consideration or compensation, the person
associating CC0 with a Work (the "Affirmer"), to the extent that he or she
is an owner of Copyright and Related Rights in the Work, voluntarily
elects to apply CC0 to the Work and publicly distribute the Work under its
terms, with knowledge of his or her Copyright and Related Rights in the
Work and the meaning and intended legal effect of CC0 on those rights.

1. Copyright and Related Rights. A Work made available under CC0 may be
protected by copyright and related or neighboring rights ("Copyright and
Related Rights"). Copyright and Related Rights include, but are not
limited to, the following:

  i. the right to reproduce, adapt, distribute, perform, display,
     communicate, and translate a Work;
 ii. moral rights retained by the original author(s) and/or performer(s);
iii. publicity and privacy rights pertaining to a person's image or
     likeness depicted in a Work;
 iv. rights protecting against unfair competition in regards to a Work,
     subject to the limitations in paragraph 4(a), below;
  v. rights protecting the extraction, dissemination, use and reuse of data
     in a Work;
 vi. database rights (such as those arising under Directive 96/9/EC of the
     European Parliament and of the Council of 11 March 1996 on the legal
     protection of databases, and under any national implementation
     thereof, including any amended or successor version of such
     directive); and
vii. other similar, equivalent or corresponding rights throughout the
     world based on applicable law or treaty, and any national
     implementations thereof.

2. Waiver. To the greatest extent permitted by, but not in contravention
of, applicable law, Affirmer hereby overtly, fully, permanently,
irrevocably and unconditionally waives, abandons, and surrenders all of
Affirmer's Copyright and Related Rights and associated claims and causes
of action, whether now known or unknown (including existing as well as
future claims and causes of action), in the Work (i) in all territories
worldwide, (ii) for the maximum duration provided by applicable law or
treaty (including future time extensions), (iii) in any current or future
medium and for any number of copies, and (iv) for any purpose whatsoever,
including without limitation commercial, advertising or promotional
purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
member of the public at large and to the detriment of Affirmer's heirs and
successors, fully intending that such Waiver shall not be subject to
revocation, rescission, cancellation, termination, or any other legal or
equitable action to disrupt the quiet enjoyment of the Work by the public
as contemplated by Affirmer's express Statement of Purpose.

3. Public License Fallback. Should any part of the Waiver for any reason
be judged legally invalid or ineffective under applicable law, then the
Waiver shall be preserved to the maximum extent permitted taking into
account Affirmer's express Statement of Purpose. In addition, to the
extent the Waiver is so judged Affirmer hereby grants to each affected
person a royalty-free, non transferable, non sublicensable, non exclusive,
irrevocable and unconditional license to exercise Affirmer's Copyright and
Related Rights in the Work (i) in all territories worldwide, (ii) for the
maximum duration provided by applicable law or treaty (including future
time extensions), (iii) in any current or future medium and for any number
of copies, and (iv) for any purpose whatsoever, including without
limitation commercial, advertising or promotional purposes (the
"License"). The License shall be deemed effective as of the date CC0 was
applied by Affirmer to the Work. Should any part of the License for any
reason be judged legally invalid or ineffective under applicable law, such
partial invalidity or ineffectiveness shall not invalidate the remainder
of the License, and in such case Affirmer hereby affirms that he or she
will not (i) exercise any of his or her remaining Copyright and Related
Rights in the Work or (ii) assert any associated claims and causes of
action with respect to the Work, in either case contrary to Affirmer's
express Statement of Purpose.

4. Limitations and Disclaimers.

 a. No trademark or patent rights held by Affirmer are waived, abandoned,
    surrendered, licensed or otherwise affected by this document.
 b. Affirmer offers the Work as-is and makes no representations or
    warranties of any kind concerning the Work, express, implied,
    statutory or otherwise, including without limitation warranties of
    title, merchantability, fitness for a particular purpose, non
    infringement, or the absence of latent or other defects, accuracy, or
    the present or absence of errors, whether or not discoverable, all to
    the greatest extent permissible under applicable law.
 c. Affirmer disclaims responsibility for clearing rights of other persons
    that may apply to the Work or any use thereof, including without
    limitation any person's Copyright and Related Rights in the Work.
    Further, Affirmer disclaims responsibility for obtaining any necessary
    consents, permissions or other rights required for any use of the
    Work.
 d. Affirmer understands and acknowledges that Creative Commons is not a
    party to this document and has no duty or obligation with respect to
    this CC0 or use of the Work.
</file>

<file path="repomixx.bat">
repomix --style xml --remove-empty-lines --copy --ignore "**/generated/**"
</file>

<file path="settings.gradle">
pluginManagement {
	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		mavenCentral()
		gradlePluginPortal()
	}
}
</file>

<file path="src/client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingClient.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
@Environment(EnvType.CLIENT)
public class ChiseledEnchantingClient implements ClientModInitializer {
	@Override
	public void onInitializeClient() {
		// This entrypoint is suitable for setting up client-specific logic, such as rendering.
	}
}
</file>

<file path="src/client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingModMenu.java">
package ninja.trek.chiseledenchanting;
import com.terraformersmc.modmenu.api.ConfigScreenFactory;
import com.terraformersmc.modmenu.api.ModMenuApi;
import net.minecraft.text.Text;
import me.shedaniel.clothconfig2.api.ConfigBuilder;
import me.shedaniel.clothconfig2.api.ConfigCategory;
import me.shedaniel.clothconfig2.api.ConfigEntryBuilder;
public class ChiseledEnchantingModMenu implements ModMenuApi {
    @Override
    public ConfigScreenFactory<?> getModConfigScreenFactory() {
        System.out.println("ModMenu Screen is Loading!"); // Debug output
        return parent -> {
            ConfigBuilder builder = ConfigBuilder.create()
                    .setParentScreen(parent)
                    .setTitle(Text.translatable("config.chiseled-enchanting.title"));
            ConfigCategory general = builder.getOrCreateCategory(Text.translatable("config.chiseled-enchanting.category.general"));
            ConfigEntryBuilder entryBuilder = builder.entryBuilder();
            general.addEntry(entryBuilder.startBooleanToggle(
                            Text.translatable("config.chiseled-enchanting.option.enable_weighting"),
                            ChiseledEnchantingConfig.get().enableWeighting)
                    .setDefaultValue(true)
                    .setSaveConsumer(newValue -> {
                        ChiseledEnchantingConfig.get().enableWeighting = newValue;
                        ChiseledEnchantingConfig.save();
                    })
                    .build());
            general.addEntry(entryBuilder.startBooleanToggle(
                            Text.translatable("config.chiseled-enchanting.option.inverse_books"),
                            ChiseledEnchantingConfig.get().inverseWeightingForBooks)
                    .setDefaultValue(true)
                    .setSaveConsumer(newValue -> {
                        ChiseledEnchantingConfig.get().inverseWeightingForBooks = newValue;
                        ChiseledEnchantingConfig.save();
                    })
                    .build());
            return builder.build();
        };
    }
}
</file>

<file path="src/client/java/ninja/trek/chiseledenchanting/mixin/client/ExampleClientMixin.java">
package ninja.trek.chiseledenchanting.mixin.client;
import net.minecraft.client.MinecraftClient;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
@Mixin(MinecraftClient.class)
public class ExampleClientMixin {
	@Inject(at = @At("HEAD"), method = "run")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftClient.run()V
	}
}
</file>

<file path="src/client/resources/chiseled-enchanting.client.mixins.json">
{
	"required": true,
	"package": "ninja.trek.chiseledenchanting.mixin.client",
	"compatibilityLevel": "JAVA_21",
	"client": [
		"ExampleClientMixin"
	],
	"injectors": {
		"defaultRequire": 1
	}
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchanting.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.item.v1.FabricItem;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.fabricmc.fabric.api.object.builder.v1.block.entity.FabricBlockEntityTypeBuilder;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.util.Identifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class ChiseledEnchanting implements ModInitializer {
	public static final String MOD_ID = "chiseled-enchanting";
	public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
	public static final Block CHISELED_ENCHANTING_TABLE = new ChiseledEnchantmentTableBlock(
			FabricBlockSettings.copyOf(Blocks.ENCHANTING_TABLE)
	);
	public static final BlockEntityType<ChiseledEnchantmentTableBlockEntity> CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY =
			FabricBlockEntityTypeBuilder.create(
					ChiseledEnchantmentTableBlockEntity::new,
					CHISELED_ENCHANTING_TABLE
			).build();
	@Override
	public void onInitialize() {
		Registry.register(
				Registries.BLOCK_ENTITY_TYPE,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY
		);
		Registry.register(
				Registries.BLOCK,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				CHISELED_ENCHANTING_TABLE
		);
		Registry.register(
				Registries.ITEM,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				new BlockItem(CHISELED_ENCHANTING_TABLE, new Item.Settings())
		);
		LOGGER.info("Chiseled Enchanting mod initialized!");
	}
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingConfig.java">
package ninja.trek.chiseledenchanting;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import net.fabricmc.loader.api.FabricLoader;
import java.nio.file.Files;
import java.nio.file.Path;
public class ChiseledEnchantingConfig {
    private static final Path CONFIG_PATH = FabricLoader.getInstance().getConfigDir().resolve("chiseled-enchanting.json");
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static ChiseledEnchantingConfig INSTANCE;
    public boolean inverseWeightingForBooks = true;
    public boolean enableWeighting = true;
    public static ChiseledEnchantingConfig get() {
        if (INSTANCE == null) {
            load();
        }
        return INSTANCE;
    }
    public static void load() {
        try {
            if (Files.exists(CONFIG_PATH)) {
                INSTANCE = GSON.fromJson(Files.readString(CONFIG_PATH), ChiseledEnchantingConfig.class);
            } else {
                INSTANCE = new ChiseledEnchantingConfig();
                save();
            }
        } catch (Exception e) {
            ChiseledEnchanting.LOGGER.error("Failed to load config", e);
            INSTANCE = new ChiseledEnchantingConfig();
        }
    }
    public static void save() {
        try {
            Files.writeString(CONFIG_PATH, GSON.toJson(INSTANCE));
        } catch (Exception e) {
            ChiseledEnchanting.LOGGER.error("Failed to save config", e);
        }
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;
import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricBlockLootTableProvider;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.data.server.recipe.RecipeExporter;
import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
import net.minecraft.item.Items;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.util.Identifier;
public class ChiseledEnchantingDataGenerator implements DataGeneratorEntrypoint {
    @Override
    public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {
        FabricDataGenerator.Pack pack = fabricDataGenerator.createPack();
        pack.addProvider((output, registriesFuture) -> new FabricRecipeProvider(output, registriesFuture) {
            @Override
            public void generate(RecipeExporter exporter) {
                ShapedRecipeJsonBuilder.create(RecipeCategory.DECORATIONS, ChiseledEnchanting.CHISELED_ENCHANTING_TABLE)
                        .pattern(" B ")
                        .pattern("DTD")
                        .pattern("OOO")
                        .input('B', Items.BOOK)
                        .input('D', Items.DIAMOND)
                        .input('T', Items.ENCHANTING_TABLE)
                        .input('O', Items.OBSIDIAN)
                        .criterion(FabricRecipeProvider.hasItem(Items.ENCHANTING_TABLE),
                                FabricRecipeProvider.conditionsFromItem(Items.ENCHANTING_TABLE))
                        .offerTo(exporter, Identifier.of(ChiseledEnchanting.MOD_ID, "chiseled_enchanting_table"));
            }
        });
        pack.addProvider((output, registriesFuture) -> new FabricBlockLootTableProvider(output, registriesFuture) {
            @Override
            public void generate() {
                addDrop(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE);
            }
        });
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentScreenHandler.java">
package ninja.trek.chiseledenchanting;
import net.minecraft.screen.EnchantmentScreenHandler;
import net.minecraft.screen.ScreenHandlerContext;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.PlayerInventory;
import ninja.trek.chiseledenchanting.mixin.EnchantmentScreenHandlerAccessor;
public class ChiseledEnchantmentScreenHandler extends EnchantmentScreenHandler {
    public ChiseledEnchantmentScreenHandler(int syncId, PlayerInventory inventory, ScreenHandlerContext context) {
        super(syncId, inventory, context);
    }
    @Override
    public boolean canUse(PlayerEntity player) {
        // Use the mixin accessor to obtain the context, since the field is private
        ScreenHandlerContext context = ((EnchantmentScreenHandlerAccessor)this).getContext();
        return context.get((world, pos) ->
                world.getBlockState(pos).isOf(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE), true);
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlock.java">
package ninja.trek.chiseledenchanting;
import com.mojang.serialization.Decoder;
import com.mojang.serialization.Encoder;
import com.mojang.serialization.MapCodec;
import net.minecraft.block.*;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.BlockEntityTicker;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.screen.*;
import net.minecraft.text.Text;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.BlockView;
import net.minecraft.world.World;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.util.shape.VoxelShapes;
import org.jetbrains.annotations.Nullable;
import net.minecraft.block.AbstractBlock;
public class ChiseledEnchantmentTableBlock extends BlockWithEntity {
    private static final VoxelShape BASE_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 12.0, 16.0);
    private static final VoxelShape FLOATING_BOOK_SHAPE = Block.createCuboidShape(4.0, 12.0, 4.0, 12.0, 14.0, 12.0);
    private static final VoxelShape SHAPE = VoxelShapes.union(BASE_SHAPE, FLOATING_BOOK_SHAPE);
    public ChiseledEnchantmentTableBlock(Settings settings) {
        super(settings);
    }
    @Override
    protected MapCodec<ChiseledEnchantmentTableBlock> getCodec() {
        return MapCodec.of(Encoder.empty(), Decoder.unit(this));
    }
    @Nullable
    protected static <E extends BlockEntity, T extends BlockEntity> BlockEntityTicker<T> checkType(World world,
                                                                                                   BlockEntityType<T> givenType, BlockEntityType<E> expectedType, BlockEntityTicker<? super E> ticker) {
        return expectedType == givenType ? (BlockEntityTicker<T>) ticker : null;
    }
    @Override
    @Nullable
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(World world, BlockState state, BlockEntityType<T> type) {
        return world.isClient ? checkType(world, type, ChiseledEnchanting.CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY,
                ChiseledEnchantmentTableBlockEntity::tick) : null;
    }
    @Override
    public BlockRenderType getRenderType(BlockState state) {
        return BlockRenderType.MODEL;
    }
    @Override
    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {
        return new ChiseledEnchantmentTableBlockEntity(pos, state);
    }
    @Override
    public VoxelShape getOutlineShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {
        return SHAPE;
    }
    @Override
    protected ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, BlockHitResult hit) {
        if (world.isClient) {
            return ActionResult.SUCCESS;
        }
        BlockEntity blockEntity = world.getBlockEntity(pos);
        if (blockEntity instanceof ChiseledEnchantmentTableBlockEntity) {
            player.openHandledScreen(state.createScreenHandlerFactory(world, pos));
            return ActionResult.CONSUME;
        }
        return ActionResult.PASS;
    }
    @Override
    public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState state, World world, BlockPos pos) {
        return new SimpleNamedScreenHandlerFactory((syncId, inventory, player) ->
                new ChiseledEnchantmentScreenHandler(syncId, inventory, ScreenHandlerContext.create(world, pos)),
                Text.translatable("container.enchant")
        );
    }
    @Override
    public void onStateReplaced(BlockState state, World world, BlockPos pos, BlockState newState, boolean moved) {
        if (state.getBlock() != newState.getBlock()) {
            BlockEntity blockEntity = world.getBlockEntity(pos);
            if (blockEntity instanceof ChiseledEnchantmentTableBlockEntity) {
                // Handle any cleanup if needed
            }
            super.onStateReplaced(state, world, pos, newState, moved);
        }
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlockEntity.java">
package ninja.trek.chiseledenchanting;
import net.minecraft.block.BlockState;
import net.minecraft.block.ChiseledBookshelfBlock;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.inventory.Inventory;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.registry.*;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.random.Random;
import net.minecraft.world.World;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import java.util.HashMap;
import java.util.Map;
public class ChiseledEnchantmentTableBlockEntity extends BlockEntity {
    private final Random random = Random.create();
    private final Map<Enchantment, Integer> enchantmentBoosts = new HashMap<>();
    public ChiseledEnchantmentTableBlockEntity(BlockPos pos, BlockState state) {
        super(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY, pos, state);
    }
    public static void tick(World world, BlockPos pos, BlockState state, ChiseledEnchantmentTableBlockEntity blockEntity) {
        blockEntity.updateEnchantmentBoosts(world, pos);
    }
    private void updateEnchantmentBoosts(World world, BlockPos pos) {
        enchantmentBoosts.clear();
        // Scan in a 5x4x5 area (one block higher than vanilla)
        for (BlockPos scanPos : BlockPos.iterate(pos.add(-2, 0, -2), pos.add(2, 3, 2))) {
            BlockState scanState = world.getBlockState(scanPos);
            if (scanState.getBlock() instanceof ChiseledBookshelfBlock) {
                BlockEntity bookshelfEntity = world.getBlockEntity(scanPos);
                if (bookshelfEntity instanceof Inventory inventory) {
                    processBookshelfInventory(inventory);
                }
            }
        }
    }
    private void processBookshelfInventory(Inventory inventory) {
        for (int slot = 0; slot < inventory.size(); slot++) {
            ItemStack stack = inventory.getStack(slot);
            if (stack.isOf(Items.ENCHANTED_BOOK)) {
                var bookEnchants = EnchantmentHelper.getEnchantments(stack);
                for (var entry : bookEnchants.getEnchantmentEntries()) {
                    Enchantment enchantment = entry.getKey().value();
                    int currentBoost = enchantmentBoosts.getOrDefault(enchantment, 0);
                    // Cap at 3 books (8x boost)
                    enchantmentBoosts.put(enchantment, Math.min(3, currentBoost + 1));
                }
            }
        }
    }
    public float getEnchantmentBoost(Enchantment enchantment) {
        int bookCount = enchantmentBoosts.getOrDefault(enchantment, 0);
        // Each book doubles the likelihood (2^bookCount), capped at 8x (3 books)
        return (float) Math.pow(2, bookCount);
    }
    @Override
    protected void writeNbt(NbtCompound nbt, RegistryWrapper.WrapperLookup registryLookup) {
        super.writeNbt(nbt, registryLookup);
        NbtList boostList = new NbtList();
        for (Map.Entry<Enchantment, Integer> entry : enchantmentBoosts.entrySet()) {
            NbtCompound enchantNbt = new NbtCompound();
            enchantNbt.putString("id", RegistryKeys.ENCHANTMENT.getValue().toString());
            enchantNbt.putInt("boost", entry.getValue());
            boostList.add(enchantNbt);
        }
        nbt.put("EnchantmentBoosts", boostList);
    }
    @Override
    public void readNbt(NbtCompound nbt, RegistryWrapper.WrapperLookup registryLookup) {
        super.readNbt(nbt, registryLookup);
        enchantmentBoosts.clear();
        NbtList boostList = nbt.getList("EnchantmentBoosts", 10);
        for (int i = 0; i < boostList.size(); i++) {
            NbtCompound enchantNbt = boostList.getCompound(i);
            try {
                Identifier id = Identifier.of(enchantNbt.getString("id"));
                Enchantment enchantment = registryLookup.getWrapperOrThrow(RegistryKeys.ENCHANTMENT).getOrThrow(RegistryKey.of(RegistryKeys.ENCHANTMENT, id)).value();
                if (enchantment != null) {
                    enchantmentBoosts.put(enchantment, enchantNbt.getInt("boost"));
                }
            } catch (Exception e) {
                ChiseledEnchanting.LOGGER.error("Failed to load enchantment: ", e);
            }
        }
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerAccessor.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.screen.EnchantmentScreenHandler;
import net.minecraft.screen.ScreenHandlerContext;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.gen.Accessor;
@Mixin(EnchantmentScreenHandler.class)
public interface EnchantmentScreenHandlerAccessor {
    @Accessor("context")
    ScreenHandlerContext getContext();
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerMixin.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.enchantment.EnchantmentLevelEntry;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.registry.DynamicRegistryManager;
import net.minecraft.screen.EnchantmentScreenHandler;
import ninja.trek.chiseledenchanting.ChiseledEnchanting;
import ninja.trek.chiseledenchanting.ChiseledEnchantingConfig;
import ninja.trek.chiseledenchanting.ChiseledEnchantmentTableBlockEntity;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
@Mixin(EnchantmentScreenHandler.class)
public class EnchantmentScreenHandlerMixin {
    private final Random random = new Random();
    @Inject(method = "generateEnchantments", at = @At("RETURN"), cancellable = true)
    private void modifyEnchantmentProbabilities(DynamicRegistryManager registryManager, ItemStack stack, int slot, int level, CallbackInfoReturnable<List<EnchantmentLevelEntry>> cir) {
        if (!ChiseledEnchantingConfig.get().enableWeighting) {
            return;
        }
        EnchantmentScreenHandler handler = (EnchantmentScreenHandler)(Object)this;
        ((EnchantmentScreenHandlerAccessor)handler).getContext().run((world, pos) -> {
            if (world.getBlockEntity(pos) instanceof ChiseledEnchantmentTableBlockEntity blockEntity) {
                List<EnchantmentLevelEntry> entries = cir.getReturnValue();
                if (entries == null || entries.isEmpty()) return;
                List<EnchantmentLevelEntry> modifiedEntries = new ArrayList<>();
                boolean isBook = stack.isOf(Items.BOOK);
                for (EnchantmentLevelEntry entry : entries) {
                    float boost = blockEntity.getEnchantmentBoost(entry.enchantment.value());
                    if (isBook && ChiseledEnchantingConfig.get().inverseWeightingForBooks) {
                        // Inverse weighting for books - less copies for higher boosts
                        boost = 1.0f / boost;
                    }
                    // Add multiple copies based on boost, with a minimum of 1
                    int copies = Math.max(1, Math.round(boost));
                    for (int i = 0; i < copies; i++) {
                        modifiedEntries.add(entry);
                    }
                }
                // Randomly select from weighted pool
                if (!modifiedEntries.isEmpty()) {
                    List<EnchantmentLevelEntry> finalEntries = new ArrayList<>();
                    finalEntries.add(modifiedEntries.get(random.nextInt(modifiedEntries.size())));
                    cir.setReturnValue(finalEntries);
                }
            }
        });
    }
}
</file>

<file path="src/main/java/ninja/trek/chiseledenchanting/mixin/ExampleMixin.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.server.MinecraftServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
@Mixin(MinecraftServer.class)
public class ExampleMixin {
	@Inject(at = @At("HEAD"), method = "loadWorld")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftServer.loadWorld()V
	}
}
</file>

<file path="src/main/resources/assets/chiseled-enchanting/blockstates/chiseled_enchanting_table.json">
{
  "variants": {
    "": {
      "model": "chiseled-enchanting:block/chiseled_enchanting_table"
    }
  }
}
</file>

<file path="src/main/resources/assets/chiseled-enchanting/models/block/chiseled_enchanting_table.json">
{
  "parent": "minecraft:block/enchanting_table",
  "textures": {
    "particle": "chiseled-enchanting:block/chiseled_enchanting_table_bottom",
    "bottom": "chiseled-enchanting:block/chiseled_enchanting_table_bottom",
    "top": "chiseled-enchanting:block/chiseled_enchanting_table_top",
    "side": "chiseled-enchanting:block/chiseled_enchanting_table_side"
  }
}
</file>

<file path="src/main/resources/assets/chiseled-enchanting/models/item/chiseled_enchanting_table.json">
{
  "parent": "chiseled-enchanting:block/chiseled_enchanting_table"
}
</file>

<file path="src/main/resources/chiseled-enchanting.mixins.json">
{
	"required": true,
	"package": "ninja.trek.chiseledenchanting.mixin",
	"compatibilityLevel": "JAVA_21",
	"mixins": [
		"EnchantmentScreenHandlerMixin",
		"EnchantmentScreenHandlerAccessor"
	],
	"injectors": {
		"defaultRequire": 1
	}
}
</file>

<file path="src/main/resources/fabric.mod.json">
{
	"schemaVersion": 1,
	"id": "chiseled-enchanting",
	"version": "${version}",
	"name": "Chiseled Enchanting",
	"description": "This is an example description! Tell everyone what your mod is about!",
	"authors": [
		"Me!"
	],
	"contact": {
		"homepage": "https://fabricmc.net/",
		"sources": "https://github.com/FabricMC/fabric-example-mod"
	},
	"license": "CC0-1.0",
	"icon": "assets/chiseled-enchanting/icon.png",
	"environment": "*",
	"entrypoints": {
		"main": [
			"ninja.trek.chiseledenchanting.ChiseledEnchanting"
		],
		"client": [
			"ninja.trek.chiseledenchanting.ChiseledEnchantingClient"
		],
		"fabric-datagen": [
			"ninja.trek.chiseledenchanting.ChiseledEnchantingDataGenerator"
		],
		"modmenu": [
			"ninja.trek.chiseledenchanting.ChiseledEnchantingModMenu"
		]
	},
	"mixins": [
		"chiseled-enchanting.mixins.json",
		{
			"config": "chiseled-enchanting.client.mixins.json",
			"environment": "client"
		}
	],
	"depends": {
		"fabricloader": ">=0.16.10",
		"minecraft": "~1.21",
		"java": ">=21",
		"fabric-api": "*",
		"cloth-config": ">=11.0.0",
		"modmenu": ">=7.0.0"
	},
	"suggests": {
		"another-mod": "*"
	},
	"custom": {
		"modmenu": {
			"api": "ninja.trek.chiseledenchanting.ChiseledEnchantingModMenu"
		}
	}

}
</file>

<file path="src/repomix-output.xml">
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T11:54:43.046Z
<file_summary>
This section contains a summary of this file.
<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>
<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>
<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>
<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>
<additional_info>
</additional_info>
</file_summary>
<directory_structure>
client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingClient.java
client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java
client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingModMenu.java
client/java/ninja/trek/chiseledenchanting/mixin/client/ExampleClientMixin.java
client/resources/chiseled-enchanting.client.mixins.json
main/java/ninja/trek/chiseledenchanting/ChiseledEnchanting.java
main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingConfig.java
main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java
main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentScreenHandler.java
main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlock.java
main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlockEntity.java
main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerAccessor.java
main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerMixin.java
main/java/ninja/trek/chiseledenchanting/mixin/ExampleMixin.java
main/resources/assets/chiseled-enchanting/blockstates/chiseled_enchanting_table.json
main/resources/assets/chiseled-enchanting/models/block/chiseled_enchanting_table.json
main/resources/assets/chiseled-enchanting/models/item/chiseled_enchanting_table.json
main/resources/chiseled-enchanting.mixins.json
main/resources/fabric.mod.json
repomixx.bat
</directory_structure>
<files>
This section contains the contents of the repository's files.
<file path="client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingClient.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.api.ClientModInitializer;
public class ChiseledEnchantingClient implements ClientModInitializer {
	@Override
	public void onInitializeClient() {
		// This entrypoint is suitable for setting up client-specific logic, such as rendering.
	}
}
</file>
<file path="client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;
import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
public class ChiseledEnchantingDataGenerator implements DataGeneratorEntrypoint {
	@Override
	public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {
	}
}
</file>
<file path="client/java/ninja/trek/chiseledenchanting/ChiseledEnchantingModMenu.java">
package ninja.trek.chiseledenchanting;
import com.terraformersmc.modmenu.api.ConfigScreenFactory;
import com.terraformersmc.modmenu.api.ModMenuApi;
import net.minecraft.text.Text;
import me.shedaniel.clothconfig2.api.ConfigBuilder;
import me.shedaniel.clothconfig2.api.ConfigCategory;
import me.shedaniel.clothconfig2.api.ConfigEntryBuilder;
public class ChiseledEnchantingModMenu implements ModMenuApi {
    @Override
    public ConfigScreenFactory<?> getModConfigScreenFactory() {
        return parent -> {
            ConfigBuilder builder = ConfigBuilder.create()
                    .setParentScreen(parent)
                    .setTitle(Text.translatable("config.chiseled-enchanting.title"));
            ConfigCategory general = builder.getOrCreateCategory(Text.translatable("config.chiseled-enchanting.category.general"));
            ConfigEntryBuilder entryBuilder = builder.entryBuilder();
            general.addEntry(entryBuilder.startBooleanToggle(
                            Text.translatable("config.chiseled-enchanting.option.enable_weighting"),
                            ChiseledEnchantingConfig.get().enableWeighting)
                    .setDefaultValue(true)
                    .setSaveConsumer(newValue -> {
                        ChiseledEnchantingConfig.get().enableWeighting = newValue;
                        ChiseledEnchantingConfig.save();
                    })
                    .build());
            general.addEntry(entryBuilder.startBooleanToggle(
                            Text.translatable("config.chiseled-enchanting.option.inverse_books"),
                            ChiseledEnchantingConfig.get().inverseWeightingForBooks)
                    .setDefaultValue(true)
                    .setSaveConsumer(newValue -> {
                        ChiseledEnchantingConfig.get().inverseWeightingForBooks = newValue;
                        ChiseledEnchantingConfig.save();
                    })
                    .build());
            return builder.build();
        };
    }
}
</file>
<file path="client/java/ninja/trek/chiseledenchanting/mixin/client/ExampleClientMixin.java">
package ninja.trek.chiseledenchanting.mixin.client;
import net.minecraft.client.MinecraftClient;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
@Mixin(MinecraftClient.class)
public class ExampleClientMixin {
	@Inject(at = @At("HEAD"), method = "run")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftClient.run()V
	}
}
</file>
<file path="client/resources/chiseled-enchanting.client.mixins.json">
{
	"required": true,
	"package": "ninja.trek.chiseledenchanting.mixin.client",
	"compatibilityLevel": "JAVA_21",
	"client": [
		"ExampleClientMixin"
	],
	"injectors": {
		"defaultRequire": 1
	}
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchanting.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.item.v1.FabricItem;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.fabricmc.fabric.api.object.builder.v1.block.entity.FabricBlockEntityTypeBuilder;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.util.Identifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class ChiseledEnchanting implements ModInitializer {
	public static final String MOD_ID = "chiseled-enchanting";
	public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
	public static final Block CHISELED_ENCHANTING_TABLE = new ChiseledEnchantmentTableBlock(
			FabricBlockSettings.copyOf(Blocks.ENCHANTING_TABLE)
	);
	public static final BlockEntityType<ChiseledEnchantmentTableBlockEntity> CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY =
			FabricBlockEntityTypeBuilder.create(
					ChiseledEnchantmentTableBlockEntity::new,
					CHISELED_ENCHANTING_TABLE
			).build();
	@Override
	public void onInitialize() {
		Registry.register(
				Registries.BLOCK_ENTITY_TYPE,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY
		);
		Registry.register(
				Registries.BLOCK,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				CHISELED_ENCHANTING_TABLE
		);
		Registry.register(
				Registries.ITEM,
				Identifier.of(MOD_ID, "chiseled_enchanting_table"),
				new BlockItem(CHISELED_ENCHANTING_TABLE, new Item.Settings())
		);
		LOGGER.info("Chiseled Enchanting mod initialized!");
	}
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingConfig.java">
package ninja.trek.chiseledenchanting;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import net.fabricmc.loader.api.FabricLoader;
import java.nio.file.Files;
import java.nio.file.Path;
public class ChiseledEnchantingConfig {
    private static final Path CONFIG_PATH = FabricLoader.getInstance().getConfigDir().resolve("chiseled-enchanting.json");
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static ChiseledEnchantingConfig INSTANCE;
    public boolean inverseWeightingForBooks = true;
    public boolean enableWeighting = true;
    public static ChiseledEnchantingConfig get() {
        if (INSTANCE == null) {
            load();
        }
        return INSTANCE;
    }
    public static void load() {
        try {
            if (Files.exists(CONFIG_PATH)) {
                INSTANCE = GSON.fromJson(Files.readString(CONFIG_PATH), ChiseledEnchantingConfig.class);
            } else {
                INSTANCE = new ChiseledEnchantingConfig();
                save();
            }
        } catch (Exception e) {
            ChiseledEnchanting.LOGGER.error("Failed to load config", e);
            INSTANCE = new ChiseledEnchantingConfig();
        }
    }
    public static void save() {
        try {
            Files.writeString(CONFIG_PATH, GSON.toJson(INSTANCE));
        } catch (Exception e) {
            ChiseledEnchanting.LOGGER.error("Failed to save config", e);
        }
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchantingDataGenerator.java">
package ninja.trek.chiseledenchanting;
import net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;
import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricBlockLootTableProvider;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.data.server.recipe.RecipeExporter;
import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
import net.minecraft.item.Items;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.util.Identifier;
public class ChiseledEnchantingDataGenerator implements DataGeneratorEntrypoint {
    @Override
    public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {
        FabricDataGenerator.Pack pack = fabricDataGenerator.createPack();
        pack.addProvider((output, registriesFuture) -> new FabricRecipeProvider(output, registriesFuture) {
            @Override
            public void generate(RecipeExporter exporter) {
                ShapedRecipeJsonBuilder.create(RecipeCategory.DECORATIONS, ChiseledEnchanting.CHISELED_ENCHANTING_TABLE)
                        .pattern(" B ")
                        .pattern("DTD")
                        .pattern("OOO")
                        .input('B', Items.BOOK)
                        .input('D', Items.DIAMOND)
                        .input('T', Items.ENCHANTING_TABLE)
                        .input('O', Items.OBSIDIAN)
                        .criterion(FabricRecipeProvider.hasItem(Items.ENCHANTING_TABLE),
                                FabricRecipeProvider.conditionsFromItem(Items.ENCHANTING_TABLE))
                        .offerTo(exporter, Identifier.of(ChiseledEnchanting.MOD_ID, "chiseled_enchanting_table"));
            }
        });
        pack.addProvider((output, registriesFuture) -> new FabricBlockLootTableProvider(output, registriesFuture) {
            @Override
            public void generate() {
                addDrop(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE);
            }
        });
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentScreenHandler.java">
package ninja.trek.chiseledenchanting;
import net.minecraft.screen.EnchantmentScreenHandler;
import net.minecraft.screen.ScreenHandlerContext;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.PlayerInventory;
import ninja.trek.chiseledenchanting.mixin.EnchantmentScreenHandlerAccessor;
public class ChiseledEnchantmentScreenHandler extends EnchantmentScreenHandler {
    public ChiseledEnchantmentScreenHandler(int syncId, PlayerInventory inventory, ScreenHandlerContext context) {
        super(syncId, inventory, context);
    }
    @Override
    public boolean canUse(PlayerEntity player) {
        // Use the mixin accessor to obtain the context, since the field is private
        ScreenHandlerContext context = ((EnchantmentScreenHandlerAccessor)this).getContext();
        return context.get((world, pos) ->
                world.getBlockState(pos).isOf(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE), true);
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlock.java">
package ninja.trek.chiseledenchanting;
import com.mojang.serialization.Decoder;
import com.mojang.serialization.Encoder;
import com.mojang.serialization.MapCodec;
import net.minecraft.block.*;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.BlockEntityTicker;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.screen.*;
import net.minecraft.text.Text;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.BlockView;
import net.minecraft.world.World;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.util.shape.VoxelShapes;
import org.jetbrains.annotations.Nullable;
import net.minecraft.block.AbstractBlock;
public class ChiseledEnchantmentTableBlock extends BlockWithEntity {
    private static final VoxelShape BASE_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 12.0, 16.0);
    private static final VoxelShape FLOATING_BOOK_SHAPE = Block.createCuboidShape(4.0, 12.0, 4.0, 12.0, 14.0, 12.0);
    private static final VoxelShape SHAPE = VoxelShapes.union(BASE_SHAPE, FLOATING_BOOK_SHAPE);
    public ChiseledEnchantmentTableBlock(Settings settings) {
        super(settings);
    }
    @Override
    protected MapCodec<ChiseledEnchantmentTableBlock> getCodec() {
        return MapCodec.of(Encoder.empty(), Decoder.unit(this));
    }
    @Nullable
    protected static <E extends BlockEntity, T extends BlockEntity> BlockEntityTicker<T> checkType(World world,
                                                                                                   BlockEntityType<T> givenType, BlockEntityType<E> expectedType, BlockEntityTicker<? super E> ticker) {
        return expectedType == givenType ? (BlockEntityTicker<T>) ticker : null;
    }
    @Override
    @Nullable
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(World world, BlockState state, BlockEntityType<T> type) {
        return world.isClient ? checkType(world, type, ChiseledEnchanting.CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY,
                ChiseledEnchantmentTableBlockEntity::tick) : null;
    }
    @Override
    public BlockRenderType getRenderType(BlockState state) {
        return BlockRenderType.MODEL;
    }
    @Override
    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {
        return new ChiseledEnchantmentTableBlockEntity(pos, state);
    }
    @Override
    public VoxelShape getOutlineShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {
        return SHAPE;
    }
    @Override
    protected ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, BlockHitResult hit) {
        if (world.isClient) {
            return ActionResult.SUCCESS;
        }
        BlockEntity blockEntity = world.getBlockEntity(pos);
        if (blockEntity instanceof ChiseledEnchantmentTableBlockEntity) {
            player.openHandledScreen(state.createScreenHandlerFactory(world, pos));
            return ActionResult.CONSUME;
        }
        return ActionResult.PASS;
    }
    @Override
    public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState state, World world, BlockPos pos) {
        return new SimpleNamedScreenHandlerFactory((syncId, inventory, player) ->
                new ChiseledEnchantmentScreenHandler(syncId, inventory, ScreenHandlerContext.create(world, pos)),
                Text.translatable("container.enchant")
        );
    }
    @Override
    public void onStateReplaced(BlockState state, World world, BlockPos pos, BlockState newState, boolean moved) {
        if (state.getBlock() != newState.getBlock()) {
            BlockEntity blockEntity = world.getBlockEntity(pos);
            if (blockEntity instanceof ChiseledEnchantmentTableBlockEntity) {
                // Handle any cleanup if needed
            }
            super.onStateReplaced(state, world, pos, newState, moved);
        }
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/ChiseledEnchantmentTableBlockEntity.java">
package ninja.trek.chiseledenchanting;
import net.minecraft.block.BlockState;
import net.minecraft.block.ChiseledBookshelfBlock;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.inventory.Inventory;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.registry.*;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.random.Random;
import net.minecraft.world.World;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import java.util.HashMap;
import java.util.Map;
public class ChiseledEnchantmentTableBlockEntity extends BlockEntity {
    private final Random random = Random.create();
    private final Map<Enchantment, Integer> enchantmentBoosts = new HashMap<>();
    public ChiseledEnchantmentTableBlockEntity(BlockPos pos, BlockState state) {
        super(ChiseledEnchanting.CHISELED_ENCHANTING_TABLE_BLOCK_ENTITY, pos, state);
    }
    public static void tick(World world, BlockPos pos, BlockState state, ChiseledEnchantmentTableBlockEntity blockEntity) {
        blockEntity.updateEnchantmentBoosts(world, pos);
    }
    private void updateEnchantmentBoosts(World world, BlockPos pos) {
        enchantmentBoosts.clear();
        // Scan in a 5x4x5 area (one block higher than vanilla)
        for (BlockPos scanPos : BlockPos.iterate(pos.add(-2, 0, -2), pos.add(2, 3, 2))) {
            BlockState scanState = world.getBlockState(scanPos);
            if (scanState.getBlock() instanceof ChiseledBookshelfBlock) {
                BlockEntity bookshelfEntity = world.getBlockEntity(scanPos);
                if (bookshelfEntity instanceof Inventory inventory) {
                    processBookshelfInventory(inventory);
                }
            }
        }
    }
    private void processBookshelfInventory(Inventory inventory) {
        for (int slot = 0; slot < inventory.size(); slot++) {
            ItemStack stack = inventory.getStack(slot);
            if (stack.isOf(Items.ENCHANTED_BOOK)) {
                var bookEnchants = EnchantmentHelper.getEnchantments(stack);
                for (var entry : bookEnchants.getEnchantmentEntries()) {
                    Enchantment enchantment = entry.getKey().value();
                    int currentBoost = enchantmentBoosts.getOrDefault(enchantment, 0);
                    // Cap at 3 books (8x boost)
                    enchantmentBoosts.put(enchantment, Math.min(3, currentBoost + 1));
                }
            }
        }
    }
    public float getEnchantmentBoost(Enchantment enchantment) {
        int bookCount = enchantmentBoosts.getOrDefault(enchantment, 0);
        // Each book doubles the likelihood (2^bookCount), capped at 8x (3 books)
        return (float) Math.pow(2, bookCount);
    }
    @Override
    protected void writeNbt(NbtCompound nbt, RegistryWrapper.WrapperLookup registryLookup) {
        super.writeNbt(nbt, registryLookup);
        NbtList boostList = new NbtList();
        for (Map.Entry<Enchantment, Integer> entry : enchantmentBoosts.entrySet()) {
            NbtCompound enchantNbt = new NbtCompound();
            enchantNbt.putString("id", RegistryKeys.ENCHANTMENT.getValue().toString());
            enchantNbt.putInt("boost", entry.getValue());
            boostList.add(enchantNbt);
        }
        nbt.put("EnchantmentBoosts", boostList);
    }
    @Override
    public void readNbt(NbtCompound nbt, RegistryWrapper.WrapperLookup registryLookup) {
        super.readNbt(nbt, registryLookup);
        enchantmentBoosts.clear();
        NbtList boostList = nbt.getList("EnchantmentBoosts", 10);
        for (int i = 0; i < boostList.size(); i++) {
            NbtCompound enchantNbt = boostList.getCompound(i);
            try {
                Identifier id = Identifier.of(enchantNbt.getString("id"));
                Enchantment enchantment = registryLookup.getWrapperOrThrow(RegistryKeys.ENCHANTMENT).getOrThrow(RegistryKey.of(RegistryKeys.ENCHANTMENT, id)).value();
                if (enchantment != null) {
                    enchantmentBoosts.put(enchantment, enchantNbt.getInt("boost"));
                }
            } catch (Exception e) {
                ChiseledEnchanting.LOGGER.error("Failed to load enchantment: ", e);
            }
        }
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerAccessor.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.screen.EnchantmentScreenHandler;
import net.minecraft.screen.ScreenHandlerContext;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.gen.Accessor;
@Mixin(EnchantmentScreenHandler.class)
public interface EnchantmentScreenHandlerAccessor {
    @Accessor("context")
    ScreenHandlerContext getContext();
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/mixin/EnchantmentScreenHandlerMixin.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.enchantment.EnchantmentLevelEntry;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.registry.DynamicRegistryManager;
import net.minecraft.screen.EnchantmentScreenHandler;
import ninja.trek.chiseledenchanting.ChiseledEnchanting;
import ninja.trek.chiseledenchanting.ChiseledEnchantingConfig;
import ninja.trek.chiseledenchanting.ChiseledEnchantmentTableBlockEntity;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
@Mixin(EnchantmentScreenHandler.class)
public class EnchantmentScreenHandlerMixin {
    private final Random random = new Random();
    @Inject(method = "generateEnchantments", at = @At("RETURN"), cancellable = true)
    private void modifyEnchantmentProbabilities(DynamicRegistryManager registryManager, ItemStack stack, int slot, int level, CallbackInfoReturnable<List<EnchantmentLevelEntry>> cir) {
        if (!ChiseledEnchantingConfig.get().enableWeighting) {
            return;
        }
        EnchantmentScreenHandler handler = (EnchantmentScreenHandler)(Object)this;
        ((EnchantmentScreenHandlerAccessor)handler).getContext().run((world, pos) -> {
            if (world.getBlockEntity(pos) instanceof ChiseledEnchantmentTableBlockEntity blockEntity) {
                List<EnchantmentLevelEntry> entries = cir.getReturnValue();
                if (entries == null || entries.isEmpty()) return;
                List<EnchantmentLevelEntry> modifiedEntries = new ArrayList<>();
                boolean isBook = stack.isOf(Items.BOOK);
                for (EnchantmentLevelEntry entry : entries) {
                    float boost = blockEntity.getEnchantmentBoost(entry.enchantment.value());
                    if (isBook && ChiseledEnchantingConfig.get().inverseWeightingForBooks) {
                        // Inverse weighting for books - less copies for higher boosts
                        boost = 1.0f / boost;
                    }
                    // Add multiple copies based on boost, with a minimum of 1
                    int copies = Math.max(1, Math.round(boost));
                    for (int i = 0; i < copies; i++) {
                        modifiedEntries.add(entry);
                    }
                }
                // Randomly select from weighted pool
                if (!modifiedEntries.isEmpty()) {
                    List<EnchantmentLevelEntry> finalEntries = new ArrayList<>();
                    finalEntries.add(modifiedEntries.get(random.nextInt(modifiedEntries.size())));
                    cir.setReturnValue(finalEntries);
                }
            }
        });
    }
}
</file>
<file path="main/java/ninja/trek/chiseledenchanting/mixin/ExampleMixin.java">
package ninja.trek.chiseledenchanting.mixin;
import net.minecraft.server.MinecraftServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
@Mixin(MinecraftServer.class)
public class ExampleMixin {
	@Inject(at = @At("HEAD"), method = "loadWorld")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftServer.loadWorld()V
	}
}
</file>
<file path="main/resources/assets/chiseled-enchanting/blockstates/chiseled_enchanting_table.json">
{
  "variants": {
    "": {
      "model": "chiseled-enchanting:block/chiseled_enchanting_table"
    }
  }
}
</file>
<file path="main/resources/assets/chiseled-enchanting/models/block/chiseled_enchanting_table.json">
{
  "parent": "minecraft:block/enchanting_table",
  "textures": {
    "particle": "chiseled-enchanting:block/chiseled_enchanting_table_bottom",
    "bottom": "chiseled-enchanting:block/chiseled_enchanting_table_bottom",
    "top": "chiseled-enchanting:block/chiseled_enchanting_table_top",
    "side": "chiseled-enchanting:block/chiseled_enchanting_table_side"
  }
}
</file>
<file path="main/resources/assets/chiseled-enchanting/models/item/chiseled_enchanting_table.json">
{
  "parent": "chiseled-enchanting:block/chiseled_enchanting_table"
}
</file>
<file path="main/resources/chiseled-enchanting.mixins.json">
{
	"required": true,
	"package": "ninja.trek.chiseledenchanting.mixin",
	"compatibilityLevel": "JAVA_21",
	"mixins": [
		"EnchantmentScreenHandlerMixin",
		"EnchantmentScreenHandlerAccessor"
	],
	"injectors": {
		"defaultRequire": 1
	}
}
</file>
<file path="main/resources/fabric.mod.json">
{
	"schemaVersion": 1,
	"id": "chiseled-enchanting",
	"version": "${version}",
	"name": "Chiseled Enchanting",
	"description": "This is an example description! Tell everyone what your mod is about!",
	"authors": [
		"Me!"
	],
	"contact": {
		"homepage": "https://fabricmc.net/",
		"sources": "https://github.com/FabricMC/fabric-example-mod"
	},
	"license": "CC0-1.0",
	"icon": "assets/chiseled-enchanting/icon.png",
	"environment": "*",
	"entrypoints": {
		"main": [
			"ninja.trek.chiseledenchanting.ChiseledEnchanting"
		],
		"client": [
			"ninja.trek.chiseledenchanting.ChiseledEnchantingClient"
		],
		"fabric-datagen": [
			"ninja.trek.chiseledenchanting.ChiseledEnchantingDataGenerator"
		]
	},
	"mixins": [
		"chiseled-enchanting.mixins.json",
		{
			"config": "chiseled-enchanting.client.mixins.json",
			"environment": "client"
		}
	],
	"depends": {
		"fabricloader": ">=0.16.10",
		"minecraft": "~1.21",
		"java": ">=21",
		"fabric-api": "*",
		"cloth-config": ">=11.0.0",
		"modmenu": ">=7.0.0"
	},
	"suggests": {
		"another-mod": "*"
	}
}
</file>
<file path="repomixx.bat">
repomix --style xml --remove-empty-lines --copy --ignore "**/generated/**"
</file>
</files>
</file>

<file path="src/repomixx.bat">
repomix --style xml --remove-empty-lines --copy --ignore "**/generated/**"
</file>

</files>
